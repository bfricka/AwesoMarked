// Generated by CoffeeScript 1.3.3
var MDProcessor, Stor, aMarked;

if (!(window.console && console.log)) {
  (function() {
    var console, len, methods, noop, _results;
    noop = function() {};
    methods = ['assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error', 'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log', 'markTimeline', 'profile', 'profileEnd', 'markTimeline', 'table', 'time', 'timeEnd', 'timeStamp', 'trace', 'warn'];
    len = methods.length;
    console = window.console = {};
    _results = [];
    while (len--) {
      _results.push(console[methods[len]] = noop);
    }
    return _results;
  })();
}

/* --------------------------------------------
     Begin app.coffee
--------------------------------------------
*/


MDProcessor = (function() {

  function MDProcessor(scope, elem, attrs) {
    this.scope = scope;
    this.elem = elem;
    this.attrs = attrs;
  }

  MDProcessor.prototype.blockMatchers = [
    {
      tag: "p",
      exp: /^([^#\*\>\`]+)/i
    }, {
      tag: "h1",
      exp: /^(?:#{1}\s?)([^#]+)/i
    }, {
      tag: "h2",
      exp: /^(?:#{2}\s?)([^#]+)/i
    }, {
      tag: "h3",
      exp: /^(?:#{3}\s?)([^#]+)/i
    }, {
      tag: "h4",
      exp: /^(?:#{4}\s?)([^#]+)/i
    }, {
      tag: "h5",
      exp: /^(?:#{5}\s?)([^#]+)/i
    }, {
      tag: "h6",
      exp: /^(?:#{6}\s?)([^#]+)/i
    }, {
      tag: "li",
      exp: /^(?:\*{1}\s?)([^*\r\n]+)/i
    }, {
      tag: "blockquote",
      exp: /^(?:\>{1}\s{1})([^*\r\n]+)/i
    }, {
      tag: "pre",
      exp: /^(?:\`{3,})(\w+)(?:[\r\n]{1})?([^`{3,}]+)/i
    }
  ];

  MDProcessor.prototype.process = function(md) {
    var blocks, output, self;
    self = this;
    blocks = md.split(/(?:\r{2,}|\n{2,})/gi);
    output = [];
    _.each(blocks, function(block) {
      var markupMatches;
      if (block != null) {
        markupMatches = _.filter(self.blockMatchers, function(matcher) {
          return matcher.exp.test(block) === true;
        });
        if ((markupMatches != null) && markupMatches.length) {
          return _.each(markupMatches, function(matcher) {
            var el, exp, tag;
            tag = matcher.tag;
            exp = matcher.exp;
            el = self.buildElement(tag, exp, block);
            return output.push(el);
          });
        }
      }
    });
    window.op = blocks;
    self.needsParent(output);
    this.scope.preview = output;
    console.log("Blocks:");
    return console.log(blocks);
  };

  MDProcessor.prototype.buildElement = function(tag, exp, line) {
    var code, codeType, content, d, el, match, txt;
    d = document;
    switch (tag) {
      case 'pre':
        match = line.match(exp);
        content = match[2];
        codeType = match[1];
        txt = d.createTextNode(content);
        code = d.createElement('code');
        code.className = codeType;
        code.appendChild(txt);
        el = d.createElement(tag);
        el.appendChild(code);
        return el;
      case 'placehold':
        break;
      default:
        content = line.match(exp)[1];
        txt = d.createTextNode(content);
        el = d.createElement(tag);
        el.appendChild(txt);
        return el;
    }
  };

  MDProcessor.prototype.needsParent = function(output) {
    var $els, el, els, i, len, next, prev, tag, _results;
    $els = $(output);
    els = this.jqToArray($els);
    len = els.length;
    i = 0;
    _results = [];
    while (i < len) {
      el = els[i];
      tag = el.tagName;
      prev = i === 0 ? '' : els[i - 1].tagName;
      next = i + 1 === len ? '' : els[i + 1].tagName;
      if (tag === 'LI') {
        if (prev !== 'LI') {

        }
      }
      _results.push(i++);
    }
    return _results;
  };

  MDProcessor.prototype.jqToArray = function($els) {
    var el, els, _i, _len;
    els = [];
    for (_i = 0, _len = $els.length; _i < _len; _i++) {
      el = $els[_i];
      els.push(el);
    }
    return els;
  };

  return MDProcessor;

})();

Stor = (function() {

  function Stor() {
    this.amp = amplify.store;
  }

  Stor.prototype.get = function(key) {
    return this.amp(key);
  };

  Stor.prototype.set = function(key, val, exp) {
    if (exp == null) {
      exp = null;
    }
    return this.amp(key, val, exp);
  };

  Stor.prototype.del = function(key) {
    return this.amp(key, null);
  };

  return Stor;

})();

aMarked = angular.module('aMarked', []);

/* --------------------------------------------
     Begin directives.coffee
--------------------------------------------
*/


aMarked.directive('markdownProcessor', function() {
  return {
    restrict: 'A',
    link: function(scope, elem, attrs) {
      var p;
      p = new MDProcessor(scope, elem, attrs);
      return scope.$watch('markdown', function(md) {
        scope.$emit('markdownChange', md);
        return p.process(md);
      });
    }
  };
});

aMarked.directive('markdownPreview', function() {
  return {
    restrict: 'A',
    link: function(scope, elem, attrs) {
      return scope.$watch('preview', function(els) {
        var preCode, prev;
        prev = $(elem).empty().append(els);
        preCode = prev.find('pre');
        return _.each(preCode, function(code) {
          return hljs.highlightBlock(code);
        });
      });
    }
  };
});

/* --------------------------------------------
     Begin filters.coffee
--------------------------------------------
*/


/* --------------------------------------------
     Begin services.coffee
--------------------------------------------
*/


/* --------------------------------------------
     Begin controllers.coffee
--------------------------------------------
*/


aMarked.controller('MainAppCtrl', [
  '$scope', function($scope) {
    var getSavedState, stor;
    $scope.stor = stor = new Stor();
    $scope.title = "ng-Bootstrap";
    $scope.preview = '';
    getSavedState = (function() {
      var filename, md;
      md = stor.get('aMarkedMarkdown');
      filename = stor.get('aMarkedFile');
      $scope.markdown = md != null ? md : '';
      return $scope.filename = filename != null ? filename : 'Untitled';
    })();
    $scope.editFileName = false;
    $scope.$on('markdownChange', function(e, md) {
      return stor.set('aMarkedMarkdown', md);
    });
    return $scope.updateFilename = function(e) {
      e.preventDefault();
      stor.set('aMarkedFile', $scope.filename);
      return $scope.editFileName = false;
    };
  }
]);
